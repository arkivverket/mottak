#!/usr/bin/env bash

readonly RESOURCE_GROUP_NAME=terraform
readonly STORAGE_ACCOUNT_NAME=arkivverketmottak
readonly CONTAINER_NAME=tfstate
readonly LOCATION=westeurope
readonly KEYVAULT_NAME=arkivverketmottak
readonly SECRET_KEY=tfstate-storage-key

OUTPUT=/dev/null


errexit() {
    printf "%b\n" "$@"
    exit 1
}

is_installed() {
    hash "$1" 2> /dev/null
}

check_deps() {
    if ! is_installed jq; then
        errexit "Please install the jq command and rerun"
    fi

    if ! is_installed az; then
        errexit "Please install the az command and rerun"
    fi
}

azure_login() {
    if ! az login &> $OUTPUT; then
        errexit "Unable to log in to Azure"
    fi
}

create_keyvault() {
    local keyvault_name="$1"
    local resource_group_name="$2"
    local location="$3"

    echo "Creating keyvault $keyvault_name in $location"

    if ! az keyvault show --name "$keyvault_name" &> /dev/null; then
        if ! az keyvault create                      \
             --resource-group "$resource_group_name" \
             --location "$location"                  \
             --name "$keyvault_name" &> $OUTPUT; then
            errexit "Could not create keyvault $keyvault_name"
        fi
    else
        echo "Reusing existing vault $keyvault_name"
    fi
}

store_secret_in_vault() {
    local key="$1"
    local value="$2"
    local keyvault_name="$3"

    echo "Saving secret at key $key into vault $keyvault_name"
    if ! az keyvault secret set --name "$key" --value "$value" --vault-name "$keyvault_name" &> $OUTPUT; then
        errexit "Could not add the secret for key $key into $keyvault_name"
    fi
}

create_resource_group() {
    local resource_group_name="$1"
    local location="$2"

    echo "Creating resource group $resource_group_name in $location"

    if [[ $(az group exists --name "$resource_group_name" | tr -d '\n') == false ]]; then
        if az group create --name "$resource_group_name" --location "$location" &> $OUTPUT; then
            errexit "Could not create resource group $resource_group_name"
        fi
    else
        echo "Reusing existing resource group"
    fi
}

create_storage_account() {
    local storage_account_name="$1"
    local resource_group_name="$2"

    echo "Creating storage account $storage_account_name in the resource group $resource_group_name"

    if account_json=$(az storage account check-name --name "$storage_account_name"); then
        if [[ $(echo "$account_json" | jq --raw-output .nameAvailable | tr -d '\n') == true ]]; then
            if ! az storage account create               \
                 --resource-group "$resource_group_name" \
                 --name "$storage_account_name"          \
                 --sku Standard_LRS                      \
                 --encryption-services blob &> $OUTPUT; then
                errexit "Could not create $storage_account_name under resource group $resource_group_name"
            fi
        elif [[ $(echo "$account_json" | jq --raw-output .reason | tr -d '\n') == AlreadyExists ]]; then
            echo "Reusing existing storage account"
        else
            errexit "$(echo "$account_json" | jq --raw-output .message)"
        fi
    else
        errexit "Checking storage account $storage_account_name failed"
    fi
}

get_storage_account_key() {
    local storage_account_name="$1"
    local resource_group_name="$2"

    # prints the storage account key
    az storage account keys list               \
       --resource-group "$resource_group_name" \
       --account-name "$storage_account_name"  \
       --query [0].value \
       -o tsv
}

create_blob_storage() {
    local container_name="$1"
    local storage_account_name="$2"
    local storage_account_key="$3"

    echo "Creating blob storage for terraform state in $container_name under $storage_account_name"

    if [[ $(az storage container exists               \
               --name "$container_name"               \
               --account-name "$storage_account_name" \
               2> /dev/null | jq .exists | tr -d '\n') != true ]]; then
        if ! az storage container create            \
             --name "$container_name"               \
             --account-name "$storage_account_name" \
             --account-key "$storage_account_key" &> $OUTPUT; then
            errexit "Could not create the container named $container_name under the account $storage_account_name"
        fi
    else
        echo "Reusing existing container"
    fi
}

parse_options() {
    while true; do
        case "$1" in
            --verbose)
                OUTPUT=/dev/tty
                ;;
            *)
                break
        esac
        shift
    done
}


main() {
    parse_options "$@"
    check_deps

    azure_login
    create_resource_group "$RESOURCE_GROUP_NAME" "$LOCATION"

    create_keyvault "$KEYVAULT_NAME" "$RESOURCE_GROUP_NAME" "$LOCATION"

    create_storage_account "$STORAGE_ACCOUNT_NAME" "$RESOURCE_GROUP_NAME"
    local storage_account_key=$(get_storage_account_key "$STORAGE_ACCOUNT_NAME" "$RESOURCE_GROUP_NAME")
    create_blob_storage "$CONTAINER_NAME" "$STORAGE_ACCOUNT_NAME" "$storage_account_key"

    store_secret_in_vault "$SECRET_KEY" "$storage_account_key" "$KEYVAULT_NAME"
}

main "$@"
