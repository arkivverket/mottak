# give our webhook ap (as default:default) permissions to create workflows
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-invocation
  namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}
rules:
  - apiGroups:
      - "argoproj.io"
    resources:
      - "workflows"
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-default-invocation
  namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-invocation
subjects:
  - kind: ServiceAccount
    name: default
    namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}


# give workflows (as argo:default) permissions to run things
# see https://github.com/argoproj/argo/blob/master/docs/workflow-rbac.md
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-workflow
  namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}
rules:
  # pod get/watch is used to identify the container IDs of the current pod
  # pod patch is used to annotate the step's outputs back to controller (e.g. artifact location)
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - patch
  # logs get/watch are used to get the pods logs for script outputs, and for log archival
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-default-workflow
  namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-workflow
subjects:
  - kind: ServiceAccount
    name: default
    namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  namespace: {{ required "Missing value NAMESPACE" .Values.DA_NAMESPACE }}
data:
  config: |
    artifactRepository:
      archiveLogs: false
      s3:
        bucket:    argo-artifacts
        endpoint: minio-service:9000
        insecure: true
        accessKeySecret:
          name: storageaccount-name
          key: storageaccount-name
        secretKeySecret:
          name: storageaccount-key
          key: storageaccount-key
