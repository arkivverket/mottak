#!/usr/bin/env python3
from __future__ import print_function   # for eprint
import os                               # for getenv
import sys
import json
import psycopg2
import psycopg2.extras
import re  # for parsing the DBSTRING

# Return codes.
UUIDERROR =  1 # invalid UUID
DBERROR   = 10
JSONERROR = 11
IOERROR   = 12

def eprint(*args, **kwargs):
    """ Print to stderr """
    print(*args, file=sys.stderr, **kwargs)

# There needs to be a envir variable called DBSTRING
# it is on the following format:

# 'pgsql:host=10.0.0.0;dbname=foo;user=myuser;password=verydull'


def create_db_access(dbstring):
    """Create a psycopg2 compatible object from the connection string.
    The string is from PHP and we reuse it here
    """
    mystr = dbstring[6:]
    mystr = mystr.rstrip()
    d = dict(re.findall(r'(\w+)=([^;]+);?', mystr))
    # Validate dbstring:
    for key in ['user', 'password', 'host', 'dbname']:
        if key not in d.keys():
            eprint('%s not found in DBSTRING' % key)
            exit(DBERROR)
    return d


def my_connect(conn_info):
    try:
        connection = psycopg2.connect(user=conn_info['user'],
                                      host=conn_info['host'],
                                      dbname=conn_info['dbname'],
                                      password=conn_info['password'],
                                      connect_timeout=10)

    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL:", error)
        exit(DBERROR)
    finally:
        return connection

def my_disconnect(conn):
    conn.close()

def read_tusd_event():
    try:
        data = json.load(sys.stdin)
    except ValueError as e:
        eprint("Error parsing JSON:", e)
        exit(JSONERROR)
    return data


def get_metadata(conn, uuid):
    try:
        dict_cursor = connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        dict_cursor.execute('SELECT uuid, checksum, is_sensitive, name, email, type '
                            'FROM invitations, archive_types '
                            'WHERE archive_type_id=archive_types.id '
                            'AND uuid=%s', (uuid,))
        rec = dict_cursor.fetchall()
    except psycopg2.Error as e:
        eprint('SQL Query error:', e)
        exit(DBERROR)

    if len(rec) == 0:
        return None
    else:
        return rec[0]


def create_param_file(metadata):
    """ Create a metadata JSON-file for Argo to ingest """
########################################################

# We use the same source for both pre-create and post-finish hook
# This identifies it
my_name = os.path.basename(__file__)

data = read_tusd_event()

try:
    uuid = data["Upload"]["MetaData"]["uuid"]
except:
    eprint("Could not find UUID in JSON")
    exit(JSONERROR)


    
connection = my_connect(create_db_access(os.getenv('DBSTRING')))

metadata = get_metadata(connection, uuid)

if ((metadata) and ('uuid' in metadata)):
    print(json.dumps(metadata))
    my_disconnect(connection)
    exit(0)
else:
    print("Unknown UUID:" + uuid)
    exit(UUIDERROR)
