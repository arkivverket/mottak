#!/usr/bin/env python3
from __future__ import print_function   # for eprint
import os                               # for getenv
import sys
import json
import psycopg2
import psycopg2.extras
import re  # for parsing the DBSTRING


def eprint(*args, **kwargs):
    """ Print to stderr """
    print(*args, file=sys.stderr, **kwargs)

# There needs to be a envir variable called DBSTRING
# it is on the following format:

# 'pgsql:host=10.0.0.0;dbname=foo;user=myuser;password=verydull'


def create_db_access(dbstring):
    """Create a psycopg2 compatible object from the connection string.
    The string is from PHP and we reuse it here
    """
    mystr = dbstring[6:]
    mystr = mystr.rstrip()
    d = dict(re.findall(r'(\w+)=([^;]+);?', mystr))

    return d


def my_connect(conn_info):
    try:
        connection = psycopg2.connect(user=conn_info['user'],
                                      host=conn_info['host'],
                                      dbname=conn_info['dbname'],
                                      password=conn_info['password'],
                                      connect_timeout=10)

        cursor = connection.cursor()
        # Print PostgreSQL Connection properties
        # print(connection.get_dsn_parameters(), "\n")

        # Print PostgreSQL version
        #cursor.execute("SELECT version();")
        #record = cursor.fetchone()
        #print("You are connected to - ", record, "\n")
    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL:", error)
    finally:
        return connection


def my_disconnect(conn):
    conn.close()
    #print("PostgreSQL connection is closed")


def read_tusd_event():
    data = json.load(sys.stdin)
    return data


def get_metadata(conn, uuid):
    dict_cursor = connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
    dict_cursor.execute('SELECT uuid, checksum, is_sensitive, name, email, type '
                        'FROM invitations, archive_types '
                        'WHERE archive_type_id=archive_types.id '
                        'AND uuid=%s', (uuid,))
    rec = dict_cursor.fetchall()
    return rec[0]


data = read_tusd_event()
uuid = data["Upload"]["MetaData"]["uuid"]

connection = my_connect(create_db_access(os.getenv('DBSTRING')))

metadata = get_metadata(connection, uuid)

if ((metadata) and ('uuid' in metadata)):
    print(json.dumps(metadata))
    my_disconnect(connection)
    exit(0)
else:
    print("Unknown UUID:" + uuid)
    exit(1)
